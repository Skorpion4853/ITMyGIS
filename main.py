import telebot
from telebot import types
import logging
import asyncio
from telebot.async_telebot import AsyncTeleBot
from dotenv import load_dotenv
import os
# from DataBaseMethods import *


form = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"

logging.basicConfig(
    level=logging.INFO,
    filemode='w',
    format=form,
    datefmt='%H:%M:%S:',
    encoding='utf-8'
)
logger = logging.getLogger(__name__)

load_dotenv()
token = os.getenv("bot_token")

bot = AsyncTeleBot(token)


def write_to_file(user_id, city=None):
    filename = "users_data.txt"

    if city is None:
        with open(filename, 'a') as file:
            file.write(f"User ID: {user_id}\n")
    else:
        with open(filename, 'r+') as file:
            lines = file.readlines()
            file.seek(0)
            updated = False

            for line in lines:
                if line.startswith(f"User ID: {user_id}") and not line.strip().endswith(')'):
                    file.write(f"User ID: {user_id} (City: {city})\n")
                    updated = True
                else:
                    file.write(line)

            if not updated:
                file.write(f"User ID: {user_id} (City: {city})\n")

            file.truncate()


@bot.message_handler(commands=['start'])
async def start(message):
    try:
        user_id = message.from_user.id
        write_to_file(user_id)


        markup_city = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup_city.add(types.KeyboardButton('–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫'))
        markup_city.add(types.KeyboardButton('–ú–æ—Å–∫–≤–∞'))
        markup_city.add(types.KeyboardButton('–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'))

        await bot.send_message(
            message.chat.id,
            "üëã –ü—Ä–∏–≤–µ—Ç! –î–ª—è –≤–∞—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –º—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞—à ID –≤ Telegram. "
            "–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ! üòä",
            reply_markup=markup_city
        )
    except Exception as err_start:
        logger.error(f'–û—à–∏–±–∫–∞ –≤ start - {err_start}')


@bot.message_handler(func=lambda message: message.text in ['–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'])
async def handle_city(message):
    try:
        user_id = message.from_user.id
        city = message.text
        write_to_file(user_id, city)

        markup_remove = types.ReplyKeyboardRemove()
        await bot.send_message(
            message.chat.id,
            f"–û—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ!‚ò∫Ô∏è\n–í–∞—à –≥–æ—Ä–æ–¥ {city}. –ó–∞–ø–∏—Å–∞–ª–∏!üìù",
            reply_markup=markup_remove
        )
        markup_main = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn_top_list = types.KeyboardButton('–¢–æ–ø 10 –º–µ—Å—Ç')
        btn_akinator = types.KeyboardButton('–ê–∫–∏–Ω–∞—Ç–æ—Ä')
        btn_settings = types.KeyboardButton('–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
        btn_history = types.KeyboardButton('–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        markup_main.add(btn_top_list, btn_akinator, btn_settings, btn_history)

        await bot.send_message(
        message.chat.id,
        "–ß–µ–º –∑–∞–π–º—ë–º—Å—è?",
        reply_markup=markup_main
        )

    except Exception as err_city:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ—Ä–æ–¥–∞ - {err_city}')

@bot.message_handler(commands=['start'])
async def start(message):
    try:
        user_id = message.from_user.id
        write_to_file(user_id)

        markup_city = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup_city.add(types.KeyboardButton('–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫'))
        markup_city.add(types.KeyboardButton('–ú–æ—Å–∫–≤–∞'))
        markup_city.add(types.KeyboardButton('–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'))

        await bot.send_message(
            message.chat.id,
            "üëã –ü—Ä–∏–≤–µ—Ç! –î–ª—è –≤–∞—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –º—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞—à ID –≤ Telegram. "
            "–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ! üòä",
            reply_markup=markup_city
        )
    except Exception as err_start:
        logger.error(f'–û—à–∏–±–∫–∞ –≤ start - {err_start}')


@bot.message_handler(commands=['start'])
async def afetr_start(message):
    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn_top_list = types.InlineKeyboardButton('–¢–æ–ø 5 –º–µ—Å—Ç')
        btn_akinator = types.InlineKeyboardButton('–ê–∫–∏–Ω–∞—Ç–æ—Ä')
        btn_settings = types.InlineKeyboardButton('–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
        btn_history = types.InlineKeyboardButton('–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        markup.add(btn_top_list, btn_akinator, btn_settings, btn_history)
        await bot.send_message(
            message.chat.id,
            "–ß–µ–º –∑–∞–π–º—ë–º—Å—è?",
            reply_markup=markup
        )
    except Exception as err_start:
        logger.error(f'–û—à–∏–±–∫–∞ - {err_start}')

@bot.message_handler(commands=['help'])
async def help(message):
    try:
        help_text = """
        ‚ú® –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É
–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞ –≤–æ–∫—Ä—É–≥! –í–æ—Ç —á—Ç–æ —É–º–µ—é:  

ü¶ä –ê–∫–∏–Ω–∞—Ç–æ—Ä
–ü–æ–¥–±–µ—Ä—ë—Ç –∏–¥–µ–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –æ—Ç–¥—ã—Ö–∞ —Å–µ–≥–æ–¥–Ω—è –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ  

‚≠ê –†–µ–π—Ç–∏–Ω–≥
–ü–æ–∫–∞–∂–µ—Ç —Ç–æ–ø–æ–≤—ã–µ –º–µ—Å—Ç–∞:  
‚Üí –°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
‚Üí –õ—É—á—à–∏–µ –∑–∞ –º–µ—Å—è—Ü

‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
–°–º–µ–Ω–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª–æ–∫–∞—Ü–∏–π  

üìú –ò—Å—Ç–æ—Ä–∏—è
–í–∞—à–∏ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç  

üîô –í–æ–∑–≤—Ä–∞—Ç
–û—Ç–º–µ–Ω–∏—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ  

–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é ‚Üì
        """
        await bot.send_message(message.chat.id, help_text)
    except Exception as err_help:
        logger.error(f"–û—à–∏–±–∫–∞ help'–∞ - {err_help}")


async def main():
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
    await bot.polling(non_stop=True, skip_pending=True)


if __name__ == "__main__":
    asyncio.run(main())
